/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.GameCall
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PlayerInfo : TBase
  {
    private int _X;
    private int _Y;
    private List<sbyte> _name;
    private int _HP;
    private int _MaxHP;
    private int _Level;
    private int _MP;
    private int _MaxMP;
    private int _Shield;
    private int _ActorCode;

    public int X
    {
      get
      {
        return _X;
      }
      set
      {
        __isset.X = true;
        this._X = value;
      }
    }

    public int Y
    {
      get
      {
        return _Y;
      }
      set
      {
        __isset.Y = true;
        this._Y = value;
      }
    }

    public List<sbyte> Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int HP
    {
      get
      {
        return _HP;
      }
      set
      {
        __isset.HP = true;
        this._HP = value;
      }
    }

    public int MaxHP
    {
      get
      {
        return _MaxHP;
      }
      set
      {
        __isset.MaxHP = true;
        this._MaxHP = value;
      }
    }

    public int Level
    {
      get
      {
        return _Level;
      }
      set
      {
        __isset.Level = true;
        this._Level = value;
      }
    }

    public int MP
    {
      get
      {
        return _MP;
      }
      set
      {
        __isset.MP = true;
        this._MP = value;
      }
    }

    public int MaxMP
    {
      get
      {
        return _MaxMP;
      }
      set
      {
        __isset.MaxMP = true;
        this._MaxMP = value;
      }
    }

    public int Shield
    {
      get
      {
        return _Shield;
      }
      set
      {
        __isset.Shield = true;
        this._Shield = value;
      }
    }

    public int ActorCode
    {
      get
      {
        return _ActorCode;
      }
      set
      {
        __isset.ActorCode = true;
        this._ActorCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool X;
      public bool Y;
      public bool name;
      public bool HP;
      public bool MaxHP;
      public bool Level;
      public bool MP;
      public bool MaxMP;
      public bool Shield;
      public bool ActorCode;
    }

    public PlayerInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              X = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Y = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Name = new List<sbyte>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  sbyte _elem2 = 0;
                  _elem2 = iprot.ReadByte();
                  Name.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              HP = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              MaxHP = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              MP = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              MaxMP = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Shield = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              ActorCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.X) {
        field.Name = "X";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(X);
        oprot.WriteFieldEnd();
      }
      if (__isset.Y) {
        field.Name = "Y";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Y);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, Name.Count));
          foreach (sbyte _iter3 in Name)
          {
            oprot.WriteByte(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.HP) {
        field.Name = "HP";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HP);
        oprot.WriteFieldEnd();
      }
      if (__isset.MaxHP) {
        field.Name = "MaxHP";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxHP);
        oprot.WriteFieldEnd();
      }
      if (__isset.Level) {
        field.Name = "Level";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.MP) {
        field.Name = "MP";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MP);
        oprot.WriteFieldEnd();
      }
      if (__isset.MaxMP) {
        field.Name = "MaxMP";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxMP);
        oprot.WriteFieldEnd();
      }
      if (__isset.Shield) {
        field.Name = "Shield";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Shield);
        oprot.WriteFieldEnd();
      }
      if (__isset.ActorCode) {
        field.Name = "ActorCode";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActorCode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerInfo(");
      sb.Append("X: ");
      sb.Append(X);
      sb.Append(",Y: ");
      sb.Append(Y);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",HP: ");
      sb.Append(HP);
      sb.Append(",MaxHP: ");
      sb.Append(MaxHP);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",MP: ");
      sb.Append(MP);
      sb.Append(",MaxMP: ");
      sb.Append(MaxMP);
      sb.Append(",Shield: ");
      sb.Append(Shield);
      sb.Append(",ActorCode: ");
      sb.Append(ActorCode);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
