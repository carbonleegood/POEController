/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.GameCall
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TrophyInfo : TBase
  {
    private int _ObjPtr;
    private int _ID;
    private short _Type;
    private short _Color;
    private short _Width;
    private short _Height;
    private short _X;
    private short _Y;
    private short _Socket;
    private short _SocketConnect;
    private bool _ThreeColorSocket;
    private List<sbyte> _Name;

    public int ObjPtr
    {
      get
      {
        return _ObjPtr;
      }
      set
      {
        __isset.ObjPtr = true;
        this._ObjPtr = value;
      }
    }

    public int ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public short Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    public short Color
    {
      get
      {
        return _Color;
      }
      set
      {
        __isset.Color = true;
        this._Color = value;
      }
    }

    public short Width
    {
      get
      {
        return _Width;
      }
      set
      {
        __isset.Width = true;
        this._Width = value;
      }
    }

    public short Height
    {
      get
      {
        return _Height;
      }
      set
      {
        __isset.Height = true;
        this._Height = value;
      }
    }

    public short X
    {
      get
      {
        return _X;
      }
      set
      {
        __isset.X = true;
        this._X = value;
      }
    }

    public short Y
    {
      get
      {
        return _Y;
      }
      set
      {
        __isset.Y = true;
        this._Y = value;
      }
    }

    public short Socket
    {
      get
      {
        return _Socket;
      }
      set
      {
        __isset.Socket = true;
        this._Socket = value;
      }
    }

    public short SocketConnect
    {
      get
      {
        return _SocketConnect;
      }
      set
      {
        __isset.SocketConnect = true;
        this._SocketConnect = value;
      }
    }

    public bool ThreeColorSocket
    {
      get
      {
        return _ThreeColorSocket;
      }
      set
      {
        __isset.ThreeColorSocket = true;
        this._ThreeColorSocket = value;
      }
    }

    public List<sbyte> Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ObjPtr;
      public bool ID;
      public bool Type;
      public bool Color;
      public bool Width;
      public bool Height;
      public bool X;
      public bool Y;
      public bool Socket;
      public bool SocketConnect;
      public bool ThreeColorSocket;
      public bool Name;
    }

    public TrophyInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ObjPtr = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              Type = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Color = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              Width = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              Height = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              X = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              Y = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I16) {
              Socket = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I16) {
              SocketConnect = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              ThreeColorSocket = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                Name = new List<sbyte>();
                TList _list44 = iprot.ReadListBegin();
                for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                {
                  sbyte _elem46 = 0;
                  _elem46 = iprot.ReadByte();
                  Name.Add(_elem46);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TrophyInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.ObjPtr) {
        field.Name = "ObjPtr";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ObjPtr);
        oprot.WriteFieldEnd();
      }
      if (__isset.ID) {
        field.Name = "ID";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ID);
        oprot.WriteFieldEnd();
      }
      if (__isset.Type) {
        field.Name = "Type";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.Color) {
        field.Name = "Color";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Color);
        oprot.WriteFieldEnd();
      }
      if (__isset.Width) {
        field.Name = "Width";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Width);
        oprot.WriteFieldEnd();
      }
      if (__isset.Height) {
        field.Name = "Height";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Height);
        oprot.WriteFieldEnd();
      }
      if (__isset.X) {
        field.Name = "X";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(X);
        oprot.WriteFieldEnd();
      }
      if (__isset.Y) {
        field.Name = "Y";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Y);
        oprot.WriteFieldEnd();
      }
      if (__isset.Socket) {
        field.Name = "Socket";
        field.Type = TType.I16;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Socket);
        oprot.WriteFieldEnd();
      }
      if (__isset.SocketConnect) {
        field.Name = "SocketConnect";
        field.Type = TType.I16;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(SocketConnect);
        oprot.WriteFieldEnd();
      }
      if (__isset.ThreeColorSocket) {
        field.Name = "ThreeColorSocket";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(ThreeColorSocket);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.Name) {
        field.Name = "Name";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, Name.Count));
          foreach (sbyte _iter47 in Name)
          {
            oprot.WriteByte(_iter47);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TrophyInfo(");
      sb.Append("ObjPtr: ");
      sb.Append(ObjPtr);
      sb.Append(",ID: ");
      sb.Append(ID);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",Color: ");
      sb.Append(Color);
      sb.Append(",Width: ");
      sb.Append(Width);
      sb.Append(",Height: ");
      sb.Append(Height);
      sb.Append(",X: ");
      sb.Append(X);
      sb.Append(",Y: ");
      sb.Append(Y);
      sb.Append(",Socket: ");
      sb.Append(Socket);
      sb.Append(",SocketConnect: ");
      sb.Append(SocketConnect);
      sb.Append(",ThreeColorSocket: ");
      sb.Append(ThreeColorSocket);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
