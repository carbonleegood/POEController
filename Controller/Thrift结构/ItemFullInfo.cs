/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.GameCall
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ItemFullInfo : TBase
  {
    private int _ObjPtr;
    private int _ID;
    private int _ServiceID;
    private int _WinID;
    private int _BagObjPtr;
    private short _Color;
    private short _Count;
    private short _MaxCount;
    private short _Width;
    private short _Height;
    private short _Left;
    private short _Top;
    private short _Type;
    private short _Socket;
    private short _SocketConnect;
    private bool _ThreeColorSocket;
    private bool _NeedIdentify;
    private int _Quality;
    private List<sbyte> _Name;
    private List<sbyte> _TypeName;
    private List<sbyte> _DescribInfo;

    public int ObjPtr
    {
      get
      {
        return _ObjPtr;
      }
      set
      {
        __isset.ObjPtr = true;
        this._ObjPtr = value;
      }
    }

    public int ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public int ServiceID
    {
      get
      {
        return _ServiceID;
      }
      set
      {
        __isset.ServiceID = true;
        this._ServiceID = value;
      }
    }

    public int WinID
    {
      get
      {
        return _WinID;
      }
      set
      {
        __isset.WinID = true;
        this._WinID = value;
      }
    }

    public int BagObjPtr
    {
      get
      {
        return _BagObjPtr;
      }
      set
      {
        __isset.BagObjPtr = true;
        this._BagObjPtr = value;
      }
    }

    public short Color
    {
      get
      {
        return _Color;
      }
      set
      {
        __isset.Color = true;
        this._Color = value;
      }
    }

    public short Count
    {
      get
      {
        return _Count;
      }
      set
      {
        __isset.Count = true;
        this._Count = value;
      }
    }

    public short MaxCount
    {
      get
      {
        return _MaxCount;
      }
      set
      {
        __isset.MaxCount = true;
        this._MaxCount = value;
      }
    }

    public short Width
    {
      get
      {
        return _Width;
      }
      set
      {
        __isset.Width = true;
        this._Width = value;
      }
    }

    public short Height
    {
      get
      {
        return _Height;
      }
      set
      {
        __isset.Height = true;
        this._Height = value;
      }
    }

    public short Left
    {
      get
      {
        return _Left;
      }
      set
      {
        __isset.Left = true;
        this._Left = value;
      }
    }

    public short Top
    {
      get
      {
        return _Top;
      }
      set
      {
        __isset.Top = true;
        this._Top = value;
      }
    }

    public short Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    public short Socket
    {
      get
      {
        return _Socket;
      }
      set
      {
        __isset.Socket = true;
        this._Socket = value;
      }
    }

    public short SocketConnect
    {
      get
      {
        return _SocketConnect;
      }
      set
      {
        __isset.SocketConnect = true;
        this._SocketConnect = value;
      }
    }

    public bool ThreeColorSocket
    {
      get
      {
        return _ThreeColorSocket;
      }
      set
      {
        __isset.ThreeColorSocket = true;
        this._ThreeColorSocket = value;
      }
    }

    public bool NeedIdentify
    {
      get
      {
        return _NeedIdentify;
      }
      set
      {
        __isset.NeedIdentify = true;
        this._NeedIdentify = value;
      }
    }

    public int Quality
    {
      get
      {
        return _Quality;
      }
      set
      {
        __isset.Quality = true;
        this._Quality = value;
      }
    }

    public List<sbyte> Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public List<sbyte> TypeName
    {
      get
      {
        return _TypeName;
      }
      set
      {
        __isset.TypeName = true;
        this._TypeName = value;
      }
    }

    public List<sbyte> DescribInfo
    {
      get
      {
        return _DescribInfo;
      }
      set
      {
        __isset.DescribInfo = true;
        this._DescribInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ObjPtr;
      public bool ID;
      public bool ServiceID;
      public bool WinID;
      public bool BagObjPtr;
      public bool Color;
      public bool Count;
      public bool MaxCount;
      public bool Width;
      public bool Height;
      public bool Left;
      public bool Top;
      public bool Type;
      public bool Socket;
      public bool SocketConnect;
      public bool ThreeColorSocket;
      public bool NeedIdentify;
      public bool Quality;
      public bool Name;
      public bool TypeName;
      public bool DescribInfo;
    }

    public ItemFullInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ObjPtr = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ServiceID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              WinID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              BagObjPtr = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              Color = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              Count = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              MaxCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I16) {
              Width = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I16) {
              Height = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I16) {
              Left = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I16) {
              Top = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I16) {
              Type = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I16) {
              Socket = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I16) {
              SocketConnect = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Bool) {
              ThreeColorSocket = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Bool) {
              NeedIdentify = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              Quality = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.List) {
              {
                Name = new List<sbyte>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  sbyte _elem34 = 0;
                  _elem34 = iprot.ReadByte();
                  Name.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                TypeName = new List<sbyte>();
                TList _list35 = iprot.ReadListBegin();
                for( int _i36 = 0; _i36 < _list35.Count; ++_i36)
                {
                  sbyte _elem37 = 0;
                  _elem37 = iprot.ReadByte();
                  TypeName.Add(_elem37);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.List) {
              {
                DescribInfo = new List<sbyte>();
                TList _list38 = iprot.ReadListBegin();
                for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                {
                  sbyte _elem40 = 0;
                  _elem40 = iprot.ReadByte();
                  DescribInfo.Add(_elem40);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ItemFullInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.ObjPtr) {
        field.Name = "ObjPtr";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ObjPtr);
        oprot.WriteFieldEnd();
      }
      if (__isset.ID) {
        field.Name = "ID";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ID);
        oprot.WriteFieldEnd();
      }
      if (__isset.ServiceID) {
        field.Name = "ServiceID";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ServiceID);
        oprot.WriteFieldEnd();
      }
      if (__isset.WinID) {
        field.Name = "WinID";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WinID);
        oprot.WriteFieldEnd();
      }
      if (__isset.BagObjPtr) {
        field.Name = "BagObjPtr";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BagObjPtr);
        oprot.WriteFieldEnd();
      }
      if (__isset.Color) {
        field.Name = "Color";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Color);
        oprot.WriteFieldEnd();
      }
      if (__isset.Count) {
        field.Name = "Count";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Count);
        oprot.WriteFieldEnd();
      }
      if (__isset.MaxCount) {
        field.Name = "MaxCount";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.Width) {
        field.Name = "Width";
        field.Type = TType.I16;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Width);
        oprot.WriteFieldEnd();
      }
      if (__isset.Height) {
        field.Name = "Height";
        field.Type = TType.I16;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Height);
        oprot.WriteFieldEnd();
      }
      if (__isset.Left) {
        field.Name = "Left";
        field.Type = TType.I16;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Left);
        oprot.WriteFieldEnd();
      }
      if (__isset.Top) {
        field.Name = "Top";
        field.Type = TType.I16;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Top);
        oprot.WriteFieldEnd();
      }
      if (__isset.Type) {
        field.Name = "Type";
        field.Type = TType.I16;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.Socket) {
        field.Name = "Socket";
        field.Type = TType.I16;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Socket);
        oprot.WriteFieldEnd();
      }
      if (__isset.SocketConnect) {
        field.Name = "SocketConnect";
        field.Type = TType.I16;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(SocketConnect);
        oprot.WriteFieldEnd();
      }
      if (__isset.ThreeColorSocket) {
        field.Name = "ThreeColorSocket";
        field.Type = TType.Bool;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(ThreeColorSocket);
        oprot.WriteFieldEnd();
      }
      if (__isset.NeedIdentify) {
        field.Name = "NeedIdentify";
        field.Type = TType.Bool;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NeedIdentify);
        oprot.WriteFieldEnd();
      }
      if (__isset.Quality) {
        field.Name = "Quality";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Quality);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.Name) {
        field.Name = "Name";
        field.Type = TType.List;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, Name.Count));
          foreach (sbyte _iter41 in Name)
          {
            oprot.WriteByte(_iter41);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TypeName != null && __isset.TypeName) {
        field.Name = "TypeName";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, TypeName.Count));
          foreach (sbyte _iter42 in TypeName)
          {
            oprot.WriteByte(_iter42);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (DescribInfo != null && __isset.DescribInfo) {
        field.Name = "DescribInfo";
        field.Type = TType.List;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, DescribInfo.Count));
          foreach (sbyte _iter43 in DescribInfo)
          {
            oprot.WriteByte(_iter43);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ItemFullInfo(");
      sb.Append("ObjPtr: ");
      sb.Append(ObjPtr);
      sb.Append(",ID: ");
      sb.Append(ID);
      sb.Append(",ServiceID: ");
      sb.Append(ServiceID);
      sb.Append(",WinID: ");
      sb.Append(WinID);
      sb.Append(",BagObjPtr: ");
      sb.Append(BagObjPtr);
      sb.Append(",Color: ");
      sb.Append(Color);
      sb.Append(",Count: ");
      sb.Append(Count);
      sb.Append(",MaxCount: ");
      sb.Append(MaxCount);
      sb.Append(",Width: ");
      sb.Append(Width);
      sb.Append(",Height: ");
      sb.Append(Height);
      sb.Append(",Left: ");
      sb.Append(Left);
      sb.Append(",Top: ");
      sb.Append(Top);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",Socket: ");
      sb.Append(Socket);
      sb.Append(",SocketConnect: ");
      sb.Append(SocketConnect);
      sb.Append(",ThreeColorSocket: ");
      sb.Append(ThreeColorSocket);
      sb.Append(",NeedIdentify: ");
      sb.Append(NeedIdentify);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",TypeName: ");
      sb.Append(TypeName);
      sb.Append(",DescribInfo: ");
      sb.Append(DescribInfo);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
