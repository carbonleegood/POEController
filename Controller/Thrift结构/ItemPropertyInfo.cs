/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.GameCall
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ItemPropertyInfo : TBase
  {
    private List<sbyte> _Name;
    private List<sbyte> _Property;

    public List<sbyte> Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public List<sbyte> Property
    {
      get
      {
        return _Property;
      }
      set
      {
        __isset.Property = true;
        this._Property = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Name;
      public bool Property;
    }

    public ItemPropertyInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Name = new List<sbyte>();
                TList _list44 = iprot.ReadListBegin();
                for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                {
                  sbyte _elem46 = 0;
                  _elem46 = iprot.ReadByte();
                  Name.Add(_elem46);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Property = new List<sbyte>();
                TList _list47 = iprot.ReadListBegin();
                for( int _i48 = 0; _i48 < _list47.Count; ++_i48)
                {
                  sbyte _elem49 = 0;
                  _elem49 = iprot.ReadByte();
                  Property.Add(_elem49);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ItemPropertyInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.Name) {
        field.Name = "Name";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, Name.Count));
          foreach (sbyte _iter50 in Name)
          {
            oprot.WriteByte(_iter50);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Property != null && __isset.Property) {
        field.Name = "Property";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, Property.Count));
          foreach (sbyte _iter51 in Property)
          {
            oprot.WriteByte(_iter51);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ItemPropertyInfo(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",Property: ");
      sb.Append(Property);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
